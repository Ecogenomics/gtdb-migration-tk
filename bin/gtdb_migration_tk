#!/usr/bin/env python3
###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #r
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__author__ = "Pierre Chaumeil"
__copyright__ = "Copyright 2019"
__credits__ = ["Donovan Parks", "Pierre Chaumeil", "Aaron Mussig"]
__license__ = "GPL3"
__maintainer__ = "Pierre Chaumeil"
__email__ = "uqpchaum@uq.edu.au"
__status__ = "Development"


import os
import argparse
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Specific import
from gtdb_migration_tk.main import OptionsParser
from biolib.logger import logger_setup
from biolib.misc.custom_help_formatter import CustomHelpFormatter
from gtdb_migration_tk import __version__


def print_help():
    """Help menu."""

    print('')
    print('                ...::: GTDB Migration Toolkit v' +
          __version__ + ' :::...''')
    print('''\

    NCBI folder to GTDB folder:
      update_refseq  -> Update Refseq genomes.
      update_genbank -> Update Genbank genomes.

    Call genes:
      call_genes_wf -> Full call genes workflow
                       (prodigal -> hmmsearch -> top_hit )
      prodigal       -> Call genes using Prodigal
      prodigal_check -> Check if table used by Prodigal is the same as the
                        one indicated in NCBI.
      hmmsearch      -> Search Tigrfam/Pfam markers genes and generate tophit files
      top_hit        -> generate tophits file
      metadata       -> Generate metadata derived from nucleotide (e.g., GC) and protein (e.g., gene count) files.
      rna_silva      -> Identifies, extracts, and taxonomically classifies 16S and 23S rRNA genes in genomes against SILVA
      rna_ltp        -> Identify, extract, and taxonomically classify 16S rRNA genes against the LTP DB.
      trnascan       -> Identifies tRNAs in genomes.
      checkm         -> Estimates the quality of the new genomes
      
     Access to Database:
     update_db       -> Update the gtdb database

    Metadata:
      create_tables     -> Create tables with metadata for all genomes (currently only NCBI)
      parse_assemblies  -> Create tables with metadata for all NCBI genomes from assembly summaries
      parse_ncbi_dir    -> Create tables with metadata for all NCBI genomes from directories

    NCBI Taxonomy:
      parse_ncbi_taxonomy   -> Create summary files of the NCBI taxonomy file.

    Information from Nomenclatural resources:
      lpsn     -> Process steps for LPSN.
      bacdive  -> Process steps for BacDive. [In Dev]
      strains  -> Set of tools to combined information from LPSN,DSMZ and Straininfo.
      
    Curation files
      curation_lists -> Lists and pseudo-trees for new representatives, polyphyletic taxa, rogue genomes, and genomes with modified NCBI names

    Miscellaneous commands:
      list_genomes -> Produce file indicating the directory of each genome.

    Test suite for data validation:
      overview      -> Compare the Metadata file from the previous version with the new one.
      compare_field -> Compare a specific metadata field between to metadata files.


  Use: gtdb_migration_tk <command> -h for command specific help.

  Feature requests or bug reports can be sent to Donovan Parks (donovan.parks@gmail.com)
    or posted on GitHub (https://github.com/Ecogenomics/gtdb_migration_tk).
    ''')


if __name__ == '__main__':

    # initialize the options parser
    parser = argparse.ArgumentParser(add_help=False)
    subparsers = parser.add_subparsers(help="--", dest='subparser_name')

    # Call genes with prodigal
    prodigal_parser = subparsers.add_parser(
        'prodigal', formatter_class=CustomHelpFormatter, description='Call genes using Prodigal.')
    prodigal_parser.add_argument('-g',
                                 '--gtdb_genome_path_file', help='file indicating path to GTDB genomes.', required=True)
    prodigal_parser.add_argument(
        '--tmp_dir', help='temporary directory for storing intermediate results', default='/tmp')
    prodigal_parser.add_argument('-c', '--cpus', type=int,
                                 help='number of threads', default=1)
    prodigal_parser.add_argument(
        '--all', dest='all_genomes', help="re run all genomes", action='store_true')
    prodigal_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # Call genes
    prodigal_check_parser = subparsers.add_parser(
        'prodigal_check', formatter_class=CustomHelpFormatter, description='Check if table used by Prodigal is the same as the one indicated in NCBI.')
    prodigal_check_parser.add_argument('-g',
                                       '--gtdb_genome_path_file', help='file indicating path to GTDB genomes.', required=True)
    prodigal_check_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # Search Pfam Tigrfam markers
    hmmsearch_parser = subparsers.add_parser(
        'top_hit', formatter_class=CustomHelpFormatter, description='Generate TopHit file for Tigrfam or Pfam.')
    hmmsearch_parser.add_argument('-g',
                                  '--gtdb_genome_path_file', help='file indicating path to GTDB genomes.', required=True)
    hmmsearch_parser.add_argument('-c', '--cpus', type=int,
                                  help='number of threads', default=1)
    hmmsearch_parser.add_argument('-d', '--db',
                                  help='pfam or tigrfam.', choices=['pfam', 'tigrfam'])
    hmmsearch_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    metadata_parser = subparsers.add_parser(
        'metadata', formatter_class=CustomHelpFormatter, description='generate metadata derived from nucleotide (e.g., GC) and protein (e.g., gene count) files.')
    metadata_parser.add_argument('-g',
                                 '--gtdb_genome_path_file', help='file indicating path to GTDB genomes.', required=True)
    metadata_parser.add_argument('-c', '--cpus', type=int,
                                 help='number of threads', default=1)
    metadata_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    rna_silva_parser = subparsers.add_parser(
        'rna_silva', formatter_class=CustomHelpFormatter, description='Identifies, extracts, and taxonomically classifies 16S and 23S rRNA genes in genomes against SILVA')
    rna_silva_parser.add_argument('-g',
                                  '--gtdb_genome_path_file', help='file indicating path to GTDB genomes.', required=True)
    rna_silva_parser.add_argument('-c', '--cpus', type=int,
                                  help='number of threads', default=1)
    rna_silva_parser.add_argument('-v', '--version', type=int,
                                  help='rna Silva version', default=0)
    rna_silva_parser.add_argument('-p', '--rnapath',
                                  help='path to rna Silva file', default='/srv/whitlam/bio/db/silva/')
    rna_silva_parser.add_argument('-r','--rna_gene', choices=[
                        'ssu', 'lsu_23S', 'lsu_5S'], help="rRNA gene to process")
    rna_silva_parser.add_argument(
        '--silent', help="suppress output", action='store_true')


    rna_ltp_parser = subparsers.add_parser(
        'rna_ltp', formatter_class=CustomHelpFormatter, description='Identifies, extracts, and taxonomically classifies 16S and 23S rRNA genes in genomes against SILVA')
    rna_ltp_parser.add_argument('-g',
                                  '--gtdb_genome_path_file', help='file indicating path to GTDB genomes.', required=True)
    rna_ltp_parser.add_argument('-c', '--cpus', type=int,
                                  help='number of threads', default=1)
    rna_ltp_parser.add_argument('--ltp_version', type=int,
                                  help='rna Silva version', default=0)
    rna_ltp_parser.add_argument('--ssu_version', type=int,
                                      help='rna Silva version', default=0)
    rna_ltp_parser.add_argument('-p', '--rnapath',
                                  help='path to rna Silva file', default='/srv/whitlam/bio/db/silva/')
    rna_ltp_parser.add_argument(
        '--silent', help="suppress output", action='store_true')


    trnascan_parser = subparsers.add_parser(
        'trnascan', formatter_class=CustomHelpFormatter, description='Identifies tRNAs in genomes')
    trnascan_parser.add_argument('-g',
                                  '--gtdb_genome_path_file', help='file indicating path to GTDB genomes.', required=True)
    trnascan_parser.add_argument('-c', '--cpus', type=int,
                                  help='number of threads', default=1)
    trnascan_parser.add_argument('--gbk_bac_assembly_file',
                        help='Assembly summary file downloaded from NCBI')
    trnascan_parser.add_argument('--gbk_arc_assembly_file',
                        help='Assembly summary file downloaded from NCBI')
    trnascan_parser.add_argument('--rfq_arc_assembly_file',
                        help='Assembly summary file downloaded from NCBI')
    trnascan_parser.add_argument('--rfq_bac_assembly_file',
                        help='Assembly summary file downloaded from NCBI')
    trnascan_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    checkm_parser = subparsers.add_parser('checkm',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    checkm_parser.add_argument('-g',
                                  '--gtdb_genome_path_file', help='file indicating path to GTDB genomes.', required=True)
    checkm_parser.add_argument('--report', help='report log indicating new, modified, unmodified, ..., genomes')
    checkm_parser.add_argument('-o','--output_dir', help='output directory')
    checkm_parser.add_argument(
        '--all', dest='all_genomes', help="re run all genomes", action='store_true')
    checkm_parser.add_argument('-c', '--cpus', type=int,
                                  help='number of threads', default=1)
    checkm_parser.add_argument(
        '--silent', help="suppress output", action='store_true')
        
    # Commands to Update database
    update_db_parser = subparsers.add_parser(
        'update_db', formatter_class=CustomHelpFormatter, description='Ypdate the Postgres database.')
    update_db_parser.add_argument('--hostname', required=True)
    update_db_parser.add_argument('-u', '--user', 
                                  help='psql user',  required=True)
    update_db_parser.add_argument('-p', '--password', 
                                  help='password for psql user',  required=True)
    update_db_parser.add_argument('-d', '--db',
                                  help='database.',  required=True)
    update_db_parser.add_argument('--path_to_log',
                                  help='Path to log file.',dest='output_dir',  required=True)
    update_db_parser.add_argument('-c',
                                  '--checkm_profile_new_genomes', required=True)
    update_db_parser.add_argument('-g', '--genome_dirs_file', 
                                  help='file listing all paths to NCBI genomes',  required=True)
    update_db_parser.add_argument('-f', '--ftp_download_date',
                                  help='Date when data was downloaded.')
    update_db_parser.add_argument('-r', '--repository',
                                  help='NCBI repo.',choices=['refseq','genbank'])
    update_db_parser.add_argument('--cpus', type=int,
                                  help='number of threads', default=1)
    update_db_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # Search Pfam Tigrfam markers
    hmmsearch_parser = subparsers.add_parser(
        'hmmsearch', formatter_class=CustomHelpFormatter, description='Call Hmmsearch on new and modified genomes.')
    hmmsearch_parser.add_argument('-g',
                                  '--gtdb_genome_path_file', help='file indicating path to GTDB genomes.', required=True)
    hmmsearch_parser.add_argument('-c', '--cpus', type=int,
                                  help='number of threads', default=1)
    hmmsearch_parser.add_argument('-d', '--db',
                                  help='pfam or tigrfam.', choices=['pfam', 'tigrfam'])
    hmmsearch_parser.add_argument(
        '--tmp_dir', help='temporary directory for storing intermediate results', default='/tmp')

    hmmsearch_parser.add_argument(
        '-r', '--report', help='reports file generated by update steps.')
    hmmsearch_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # Create metadata tables
    create_tables_parser = subparsers.add_parser('create_tables', formatter_class=CustomHelpFormatter,
                                                    description='Create tables with metadata for all NCBI genomes.')
    create_tables_parser.add_argument('-g',
                                      '--gtdb_genome_path_file', help='file indicating path to GTDB genomes.', required=True)
    create_tables_parser.add_argument('-o',
                                          '--output_dir', help='Output directory.', required=True)
    create_tables_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # Create metadata tables for NCBI
    create_ncbi_tables_parser = subparsers.add_parser('parse_assemblies', formatter_class=CustomHelpFormatter,
                                                    description='Parse assembly summary file to generate metadata.')
    create_ncbi_tables_parser.add_argument('--rb',help='RefSeq assembly summary file (assembly_summary_refseq.txt) for Bacteria', required=True)
    create_ncbi_tables_parser.add_argument('--ra',help='RefSeq assembly summary file (assembly_summary_refseq.txt) for Archaea', required=True)
    create_ncbi_tables_parser.add_argument('--gb',help='GenBank assembly summary file (assembly_summary_refseq.txt) for Bacteria', required=True)
    create_ncbi_tables_parser.add_argument('--ga',help='GenBank assembly summary file (assembly_summary_refseq.txt) for Archaea', required=True)
    create_ncbi_tables_parser.add_argument('-l','--genome_list',help='genome identifiers for genomes in GTDB')
    create_ncbi_tables_parser.add_argument('-o','--output_file')
    create_ncbi_tables_parser.add_argument('--silent', help="suppress output", action='store_true')

    # Create metadata tables for NCBI
    parse_ncbi_dir_parser = subparsers.add_parser('parse_ncbi_dir', formatter_class=CustomHelpFormatter,
                                                    description='Parse NCBI directories.')
    parse_ncbi_dir_parser.add_argument('-g',
                                      '--gtdb_genome_path_file', help='file indicating path to GTDB genomes.', required=True)
    parse_ncbi_dir_parser.add_argument('-o',
                                              '--output_dir', help='Output directory.', required=True)

    # Parse NCBI Taxonomy files
    parse_ncbi_tax_parser = subparsers.add_parser('parse_ncbi_taxonomy', formatter_class=CustomHelpFormatter,
                                                description='Parse assembly summary file to generate taxonomy files.')
    parse_ncbi_tax_parser.add_argument('-t','--taxonomy_dir', help='directory containing NCBI taxonomy files')
    parse_ncbi_tax_parser.add_argument('--rb',help='RefSeq assembly summary file (assembly_summary_refseq.txt) for Bacteria', required=True)
    parse_ncbi_tax_parser.add_argument('--ra',help='RefSeq assembly summary file (assembly_summary_refseq.txt) for Archaea', required=True)
    parse_ncbi_tax_parser.add_argument('--gb',help='GenBank assembly summary file (assembly_summary_refseq.txt) for Bacteria', required=True)
    parse_ncbi_tax_parser.add_argument('--ga',help='GenBank assembly summary file (assembly_summary_refseq.txt) for Archaea', required=True)
    parse_ncbi_tax_parser.add_argument('-p','--output_prefix', help='output prefix')
    parse_ncbi_tax_parser.add_argument('--silent', help="suppress output", action='store_true')

    # Misc commands
    genome_dir_parser = subparsers.add_parser(
        'list_genomes', formatter_class=CustomHelpFormatter, description='Produce file indicating the directory of each genome.')
    genome_dir_parser.add_argument(
        'genome_dir', help='base directory leading to NCBI archaeal and bacterial genome assemblies')
    genome_dir_parser.add_argument('output_file', help='output metadata file')
    genome_dir_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    # Steps to move NCBI genomes to GTDB folders
    update_rfq_parser = subparsers.add_parser(
        'update_refseq', formatter_class=CustomHelpFormatter, description='Update Refseq genomes.')
    update_rfq_parser.add_argument('--ftp_refseq_directory', dest="ftp_refseq", required=True,
                                   help='base directory leading the the FTP repository for refseq')
    update_rfq_parser.add_argument('--new_refseq_directory', dest="output_dir",
                                   required=True, help='base directory leading the new repository for refseq')
    update_rfq_parser.add_argument('--ftp_genome_dirs_file', dest="ftp_genome_dirs", required=True,
                                   help='metadata file listing all directories for the FTP folder (generated by genome_dirs.py)')
    update_rfq_parser.add_argument('--old_genome_dirs_file', dest="old_genome_dirs", required=True,
                                   help='metadata file listing all directories from the previous NCBI update date  (generated by genome_dirs.py)')
    update_rfq_parser.add_argument('--arc_assembly_summary', required=True,
                                   help='metadata file downloaded from ncbi.')
    update_rfq_parser.add_argument('--bac_assembly_summary', required=True,
                                   help='metadata file downloaded from ncbi.')
    update_rfq_parser.add_argument('--cpus', type=int, default=1,
                                   help='Number of cpus')
    update_rfq_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    update_gbk_parser = subparsers.add_parser(
        'update_genbank', formatter_class=CustomHelpFormatter, description='Update Genbank genomes.')
    update_gbk_parser.add_argument('--ftp_genbank_directory', dest="ftp_genbank", required=True,
                                   help='base directory leading the the FTP repository for genbank')
    update_gbk_parser.add_argument('--new_genbank_directory', dest="output_dir",
                                   required=True, help='base directory leading the new repository for genbank')
    update_gbk_parser.add_argument('--ftp_genbank_genome_dirs_file', dest="ftp_genbank_genome_dirs", required=True,
                                   help='metadata file listing all directories for the FTP folder (generated by ncbi_genome_dirs.py)')
    update_gbk_parser.add_argument('--old_genbank_genome_dirs_file', dest="old_genbank_genome_dirs", required=True,
                                   help='metadata file listing all directories from the previous NCBI update date  (generated by genome_dirs.py)')
    update_gbk_parser.add_argument('--new_refseq_genome_dirs_file', dest="new_refseq_genome_dirs", required=True,
                                   help='metadata file listing all directories from the previous NCBI update date  (generated by genome_dirs.py)')
    update_gbk_parser.add_argument('--arc_assembly_summary', required=True,
                                   help='Genbank metadata file downloaded from ncbi.')
    update_gbk_parser.add_argument('--bac_assembly_summary', required=True,
                                   help='Genbank metadata file downloaded from ncbi.')
    update_gbk_parser.add_argument('--cpus', type=int, default=1,
                                   help='Number of cpus')
    update_gbk_parser.add_argument(
        '--silent', help="suppress output", action='store_true')




    # Steps to update LPSN Metadata
    lpsn_parser = subparsers.add_parser('lpsn',
                                        formatter_class=CustomHelpFormatter,
                                        description='Steps to update LPSN Metadata.')

    lpsn_subparser = lpsn_parser.add_subparsers(help='Command to process LPSN metadata',
                                                dest='lpsn_subparser_name')

    lpsn_parser_lpsn_wf = lpsn_subparser.add_parser('lpsn_wf',
                                                    add_help=False,
                                                    formatter_class=CustomHelpFormatter,
                                                    help='Full Pipeline Pull HTML and Parse HTML')
    lpsn_parser_lpsn_wf.add_argument(
        'output_dir', help='Output directory.')
    lpsn_parser_lpsn_wf.add_argument(
        '--silent', help="suppress output", action='store_true')

    lpsn_parser_pull = lpsn_subparser.add_parser('pull_html',
                                                 add_help=False,
                                                 formatter_class=CustomHelpFormatter,
                                                 help='Get 4 files from LPSN listing all genera.')
    lpsn_parser_pull.add_argument(
        'output_dir', help='Output directory.')
    lpsn_parser_pull.add_argument(
        '--silent', help="suppress output", action='store_true')

    lpsn_parser_parse_html = lpsn_subparser.add_parser('parse_html',
                                                       add_help=False,
                                                       formatter_class=CustomHelpFormatter,
                                                       help='Parse HTML files.')

    lpsn_parser_parse_html.add_argument(
        'input_dir', help='Directory containing all genus HTML files.')
    lpsn_parser_parse_html.add_argument(
        'output_dir', help='Output directory.')
    lpsn_parser_parse_html.add_argument(
        '--silent', help="suppress output", action='store_true')

    # Steps to update BadDive Metadata
    bacdive_parser = subparsers.add_parser('bacdive',
                                           formatter_class=CustomHelpFormatter,
                                           description='Steps to update Bacdive Metadata.')

    bacdive_subparser = bacdive_parser.add_subparsers(help='Command to process Bacdive metadata',
                                                      dest='bacdive_subparser_name')

    bacdive_parser_dl_strains = bacdive_subparser.add_parser('download_strains',
                                                             add_help=False,
                                                             formatter_class=CustomHelpFormatter,
                                                             help='Produce metadata files describing type genera, species, and strains according to DSMZ.')
    bacdive_parser_dl_strains.add_argument(
        '--username', help='Username to log to Bacdive API.', required=True)
    bacdive_parser_dl_strains.add_argument(
        '-p', '--pwd', dest='pwd', help='Username to log to Bacdive API.', required=True)
    bacdive_parser_dl_strains.add_argument(
        'output_dir', help='Output directory.')
    bacdive_parser_dl_strains.add_argument(
        '--silent', help="suppress output", action='store_true')

    # Tools to combine Medata from different databases.
    strains_parser = subparsers.add_parser('strains',
                                           formatter_class=CustomHelpFormatter,
                                           description='Tools to combine Medata from different databases.')
    strains_subparser = strains_parser.add_subparsers(help='Tools to combine Medata from different databases.',
                                                      dest='strains_subparser_name')

    strains_parser_date = strains_subparser.add_parser('date_table',
                                                       add_help=False,
                                                       formatter_class=CustomHelpFormatter,
                                                       help='Generate a tab delimited file listing all reference dates from LPSN,DSMZ,Straininfo for each species name.')
    strains_parser_date.add_argument(
        '--lpsn_species_info', help='LPSN species file created by LPSN website parsing.', required=True)
    strains_parser_date.add_argument(
        '--dsmz_species_info', help='DSMZ species file created by DSMZ website parsing.', required=True)
    strains_parser_date.add_argument(
        '--straininfo_species_info', help='Straininfo strain file created by Straininfo website parsing.', required=True)
    strains_parser_date.add_argument('--output_file',
                                     help='Output file.')
    strains_parser_date.add_argument(
        '--silent', help="suppress output", action='store_true')

    strains_parser_type = strains_subparser.add_parser('type_table',
                                                       add_help=False,
                                                       formatter_class=CustomHelpFormatter,
                                                       help='Generate a tab delimited file listing all reference dates from LPSN,DSMZ,Straininfo for each species name.')

    strains_parser_type.add_argument('--lpsn_dir',
                                     help='Directory including the 3 LPSN result files (lpsn_genera.tsv, lpsn_species.tsv and lpsn_strains.tsv ).')
    strains_parser_type.add_argument('--dsmz_dir',
                                     help='Directory including the 3 DSMZ result files (dsmz_strains.tsv, dsmz_species.tsv and dsmz_genera.tsv ).')
    strains_parser_type.add_argument('--straininfo_dir',
                                     help='Directory including the straininfo result file (straininfo_strains.tsv).')
    strains_parser_type.add_argument('--year_table',
                                     help='Date table generated by generate_date_table.py.')
    strains_parser_type.add_argument('--metadata_file',
                                     help='Metadata file generated by GTDB')
    strains_parser_type.add_argument(
        '--ncbi_names', help='NCBI names.dmp file')
    strains_parser_type.add_argument(
        '--ncbi_nodes', help='NCBI nodes.dmp file')
    strains_parser_type.add_argument('--cpus', help='Number of threads.',
                                     type=int, default=1)
    strains_parser_type.add_argument(
        '--output_dir', help='Output directory.', default='.')
    strains_parser_type.add_argument('--source_strain', choices=['all', 'lpsn', 'dsmz', 'straininfo'], default='all',
                                     help='select LPSN,Straininfo,DSMZ to parse')
    strains_parser_type.add_argument(
        '--silent', help="suppress output", action='store_true')

    overview_parser = subparsers.add_parser('overview',
                                            formatter_class=CustomHelpFormatter,
                                            help='Compare the Metadata file from the previous version with the new one.')
    overview_parser.add_argument(
        '--previous_metadata_file', help='file indicating metadata of each genome in previous GTDB version.', required=True)
    overview_parser.add_argument(
        '--new_metadata_file', help='file indicating metadata of each genome in latest GTDB version.', required=True)
    overview_parser.add_argument(
        '--only_ncbi', help='Output file.', action='store_true')
    overview_parser.add_argument(
        '--silent', help="suppress output", action='store_true')

    metafield_parser = subparsers.add_parser('compare_field',
                                             formatter_class=CustomHelpFormatter,
                                             help='Compare a specific metadata field between to metadata files.')
    metafield_parser.add_argument(
        '--previous_metadata_file', help='file indicating metadata of each genome in previous GTDB version.', required=True)
    metafield_parser.add_argument(
        '--new_metadata_file', help='file indicating metadata of each genome in latest GTDB version.', required=True)
    metafield_parser.add_argument(
        '--field_of_interest', help='common field to compare between files.', required=True)
    metafield_parser.add_argument(
        '--output_file', help='Output file.', required=True)
    metafield_parser.add_argument(
        '--only_ncbi', help='Output file.', action='store_true')
    metafield_parser.add_argument(
        '--silent', help="suppress output", action='store_true')
        
        
    # Lists and pseudo-trees for new representatives, polyphyletic taxa, rogue genomes, and genomes with modified NCBI names
    curation_lists_parser = subparsers.add_parser('curation_lists', 
                                                formatter_class=CustomHelpFormatter, 
                                                description='Lists and pseudo-trees for new representatives, polyphyletic taxa, rogue genomes, and genomes with modified NCBI names.')
    curation_lists_parser.add_argument('--gtdb_init_taxonomy', help='initial taxonomy for latest release')
    curation_lists_parser.add_argument('--gtdb_sp_clusters', help='species clusters for latest release')
    curation_lists_parser.add_argument('--gtdb_prev_sp_clusters', help='species clusters for previous release')
    curation_lists_parser.add_argument('--gtdb_decorate_table', help='decoration table produced by PhyloRank decorate')
    curation_lists_parser.add_argument('--domain', help='domain to append to output files', choices=['bac', 'ar'])
    curation_lists_parser.add_argument('--output_dir', help='output directory')
    curation_lists_parser.add_argument('--silent', help="suppress output", action='store_true')

    # get and check options
    args = None
    if len(sys.argv) == 1 or sys.argv[1] in {'-h', '--help'}:
        print_help()
        sys.exit(0)
    else:
        args = parser.parse_args()

    try:
        logger_setup(args.output_dir,
                     'gtdb_migration_tk.log',
                     'GTDB Migration Tk',
                     __version__,
                     args.silent)
    except:
        logger_setup(None,
                     'gtdb_migration_tk.log',
                     'GTDB Migration Tk',
                     __version__,
                     args.silent)

    # do what we came here to do
    try:
        parser = OptionsParser()
        if(False):
            import cProfile
            cProfile.run('parser.parse_options(args)', 'prof')
        elif False:
            import pdb
            pdb.run(parser.parse_options(args))
        else:
            parser.parse_options(args)
    except SystemExit:
        print("\n  Controlled exit resulting from an unrecoverable error or warning.")
    except:
        print("\nUnexpected error:", sys.exc_info()[0])
        raise
